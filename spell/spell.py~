

class LCSObject:
    """ spell  LCS object"""
    
    def __init__(self,seq,id):
        self.lineIds = []
        self.lineIds.append(id)
        self.LCSseq = seq
        
    
    def getLCS(self,seq):
        count = 0
        lastMatch = -1
        for s in self.LCSseq:
            if s == "*":
                continue
            for j in range( lastMatch +1, len(seq)):
                if s == seq[j]:
                    lastMatch = j
                    count = count+1
                    break        
        return count
    
        
    def insert(self,seq,id):
        self.lineIds.append(id)
        t = ""
        lastMatch = -1
        placeholder = False
        for s in self.LCSseq:
            if s == "*":
                if placeholder == False:
                    t = t + "* "
                placeholder = True
                continue
            for j in range( lastMatch +1, len(seq)):
                if s == seq[j]:
                    placeholder = False
                    t = t + s + " "
                    lastMatch = j
                    break
                elif placeholder == False:
                    ## try to not * the first element
                    if j > 0 :
                        t = t + "* "
                    else:
                        t = t + s + " "
                    ##
                    #t = t + "* "
                    ##
                    placeholder = True
                    
        self.LCSseq = t.split()
        
    def len(self):
        return(len(self.LCSseq))
        
    def count(self):
        return(len(self.lineIds))
    
    def join(self):
        return("".join(self.LCSseq))
    
    def debug(self,ident=""):
        print(ident+'LCSOBJ:lineIds num = ',len(self.lineIds))
        print(ident+'LCSOBJ:LCSseq = ', self.LCSseq)


class LCSMap:
    """ spell LCS MAP object"""
    
    def __init__(self):
        self.LCSObjects = []
        self.lineId = 0
        
    def insert(self,seq):
        obj = self.getMatch(seq)
        
        if obj != None:
            self.lineId = self.lineId + 1
            obj.insert(seq, self.lineId)
        else :
            self.lineId = self.lineId + 1
            self.LCSObjects.append(LCSObject(seq,self.lineId))
        
        
    def getMatch(self,seq):
        match = None
        matchlen = 0
        
        for obj in self.LCSObjects:
            if (obj.len() < len(seq)/2) or (obj.len() > len(seq) *2) :
                continue    
            k = obj.getLCS(seq)
            if k  >= len(seq)/2 and k > matchlen :
                matchlen = k
                match = obj
        return match
        
        
    def objectAt(self,i):
        return(self.LCSObjects[i])
    
    def len(self):
        return(len(self.LCSObjects))
    
    def debug(self,ident= ""):
        print(ident+'LCSMap:lineId = ',self.lineId)
        for o in self.LCSObjects:
            o.debug("-o--")
    
